{"name":"Cluster-commander","body":"Cluster Commander\r\n=================\r\n\r\nCluster management tool. Concurrently runs commands on, and\r\nuploads/downloads files to groups of nodes.\r\n\r\n\r\n[![Build Status](https://secure.travis-ci.org/ibnfirnas/cluster-commander.png?branch=master)](http://travis-ci.org/ibnfirnas/cluster-commander)\r\n\r\n\r\nUsage\r\n-----\r\n```\r\ncommander   [OPTIONS] [exec]    [COMMAND_STRING]\r\ncommander   [OPTIONS] [put|get] [FROM_PATH] [TO_PATH]\r\n\r\nSHORT     LONG              DESCRIPTION                    DEFAULTS TO\r\n-------------------------------------------------------------------------\r\n-u        --user            User                           <CURRENT_USER>\r\n-g        --group           Nodes group                    pbs\r\n-s        --ssh             SSH provider ('os' | 'otp')    otp\r\n-q        --quiet           Enable SSH quiet mode.         <OFF>\r\n-t        --host-timeout    Host timeout                   0 (infinity)\r\n-T        --global-timeout  Global timeout                 0 (infinity)\r\n-p        --port            SSH port number                22\r\n-d        --save-data-to    Directory to save outputs to.   ~/.cluster-commander/outputs\r\n-w        --workers         Number of concurrent workers.  OS SSH: 25\r\n                                                           OTP SSH: <NUMBER_OF_NODES>\r\n\r\n-a        --try-all-nodes   Attempt to connect to all      <OFF>\r\n                            nodes, regardless of their\r\n                            current state (only relevant\r\n                            for the built-in, dynamic\r\n                            \"pbs\" group).\r\n\r\n-n        --nodes           Nodes list                     <EMPTY>\r\n                            (whitespace-separated).\r\n                            Overrides all other sources\r\n                            of nodes.\r\n\r\n-f      --filter-nodes      INclude matched RegEx pattern, \"\"\r\n                            to filter each node NAME\r\n                            through.\r\n\r\n-F      --filter-outputs    EXclude matched RegEx pattern, \"\"\r\n                            to filter each OUTPUT through.\r\n                            (Very useful for things like\r\n                            suppression of mendatory banners\r\n                            without loosing useful stderr\r\n                            output from OS's `ssh` command\r\n                            (as you do with '-q' option)).\r\n```\r\n\r\nIf the target command contains options itself, it must be quoted to prevent\r\ncommander from attempting to interpret those options.\r\n\r\n\r\n### Examples\r\n\r\n```sh\r\n# Use quotes when remote command contains options\r\n$ commander ls /\r\n$ commander 'ls -la /'\r\n\r\n# Get uptime for all hosts, with a 2-second host timeout and no global timeout\r\n$ commander -t 2 -a uptime\r\n\r\n# Download /etc/hosts from all available nodes in group \"compute_nodes_01\"\r\n$ commander -g compute_nodes_01 get /etc/hosts ./tmp\r\n$ ls ./tmp/*/*\r\n./tmp/node-01-01/hosts  ./tmp/node-01-03/hosts  ./tmp/node-01-05/hosts\r\n./tmp/node-01-07/hosts  ./tmp/node-01-09/hosts\r\n./tmp/node-01-02/hosts  ./tmp/node-01-04/hosts  ./tmp/node-01-06/hosts\r\n./tmp/node-01-08/hosts  ./tmp/node-01-10/hosts\r\n\r\n# Push an identical /etc/hosts file to all available nodes\r\n$ commander put ./tmp/etc_hosts /etc/hosts\r\n\r\n# Attempt to run a script on all nodes, with a global deadline of 1 minute\r\n$ commander -T60 -a /opt/collect-data.sh\r\n\r\n# Same as above, but pass an argument to the script\r\n$ commander -T60 -a '/opt/collect-data.sh --somearg'\r\n```\r\n\r\n\r\nBootstrap\r\n---------\r\n\r\n### Prerequisites\r\n\r\n* Erlang R13+ (developing on R14B03, testing on R14B02-04, R15B)\r\n* Git\r\n* GNU Make (not REALLY needed, but simpler to build if you have it)\r\n\r\n### Download, build and install\r\n\r\n```sh\r\n$ git clone git://github.com/ibnfirnas/cluster-commander.git\r\n$ cd cluster-commander\r\n$ make\r\n$ cp ./bin/commander /some/dir/in/your/path/\r\n```\r\n\r\n### Configure nodes\r\n\r\nBy default, reads a list of nodes from `pbsnodes` command (and skips nodes\r\nmarked as 'down' and/or 'offline', overridden with `-a` CLI option).\r\n\r\nAlternatively (or additionally), static groups of nodes can be defined in\r\n`~/.cluster-commander/groups.json`, for example:\r\n\r\n```json\r\n{\r\n    \"file_servers\": [\r\n        \"fs-01\",\r\n        \"fs-02\",\r\n        \"fs-03\"\r\n    ],\r\n\r\n    \"compute_nodes_01\": [\r\n        \"node-01-01\",\r\n        \"node-01-02\",\r\n        \"node-01-03\"\r\n    ],\r\n\r\n    \"compute_nodes_02\": [\r\n        \"node-02-01\",\r\n        \"node-02-02\",\r\n        \"node-02-03\"\r\n    ]\r\n}\r\n```\r\n\r\nGroup name \"all\" is reserved. It is used as a built-in meta-group for all nodes\r\nfrom all groups defined in groups.json file. This adds a lot of flexibility\r\nwhen combined with '-f' option.\r\n\r\n\r\n### Configure SSH\r\n\r\nDo you already have password-less key-based access to all your nodes?\r\n\r\n* YES: do the following and you're all set:\r\n\r\n    ```sh\r\n    $ mkdir -p ~/.cluster-commander/ssh/\r\n    $ cp ~/.ssh/id_rsa ~/.cluster-commander/ssh/id_rsa\r\n    ```\r\n\r\n* NO:\r\n    - Do you have password-protected key-based access to your nodes?\r\n        - YES:\r\n            - you have 3 options:\r\n                - remove the password from the private key and\r\n                  re-evaluate this whole, \"Configure SSH\" section\r\n\r\n                - generate a new, password-less key and\r\n                  re-evaluate this whole, \"Configure SSH\" section\r\n\r\n                - start ssh-agent and use '-s os' CLI option\r\n\r\n        - NO:\r\n            - Generate a new key, get it on your nodes somehow and\r\n              re-evaluate this whole, \"Configure SSH\", section\r\n\r\n\r\n#### Note\r\n\r\nIf there's just no way that a password-less key is acceptable to you, you can\r\njust always use '-s os' option to use system's 'ssh' command as the alternative\r\nback-end (in which case ssh-agent must be up and running already).\r\n\r\nErlang/OTP's SSH app, currently, only supports password-less private keys.\r\nBecause Erlang's focus has been on servers and automation, not interactive use.\r\nThat said, according to Ingela Andin, there's is a solution to that in the\r\ncodebase, it just hasn't yet been ported to the SSH application (due to the\r\nprior-mentioned priorities).\r\n\r\n##### SOURCES:\r\n\r\n* http://erlang.org/pipermail/erlang-questions/2010-April/050637.html\r\n* https://github.com/erlang/otp/tree/master/lib/ssh/src\r\n* https://github.com/erlang/otp/tree/master/lib/public_key/src\r\n\r\n\r\nRoadmap\r\n-------\r\n* ~~Use rebar and manage dependencies, releases, etc.~~\r\n* ~~Use getopt and allow overriding defaults (set with macros)~~\r\n* ~~Polish executable script~~\r\n* ~~node groups~~\r\n* ~~manual cluster nodes configs~~\r\n* ~~specify individual target nodes on CLI~~\r\n* Accept a (whitespace-delimited) list of nodes from stdin\r\n* Organize node-groups configurations into \"static\" and \"dynamic\" groups:\r\n    - Static groups: defined manually, on a per-node basis\r\n        - Add helper commands to generate and update static groups based\r\n          on defined naming patterns, such as: node-01-01, node-01-02,\r\n          node-02-01, ..., etc\r\n\r\n    - Built-in dynamic groups: built-in parsers for common cluster resource\r\n      managers (with options for node state handling (\"down\", \"offline\", etc)):\r\n        - ~~TORQUE/PBS~~\r\n        - Disco\r\n        - Hadoop\r\n\r\n    - Plug-in dynamic groups: define an external command whose output supplies\r\n      a whitespace-delimited list of nodes\r\n\r\n* ~~CLI option to filter nodes through a RegEx pattern~~\r\n* user-editable config files to override defaults\r\n* ~~sftp support (get/put) via 'scp' command~~\r\n* sftp support (get/put) via OTP ssh app\r\n* gated hosts:\r\n    - chained OS ssh/scp commands?\r\n    - setup tunnels?\r\n* Persistent, interactive sessions\r\n* common cluster operations scripts:\r\n    - cleanly shutdown a subset/group of nodes:\r\n        - cleanly stop current jobs\r\n* Tests...\r\n* Test a node's availability based on latency:\r\n    - ICMP\r\n    - SSH\r\n* Configurable latency threshold parameter(s) to determine whether we consider\r\n  a node \"available\"\r\n* Organize how generation of missing keys is handled.","tagline":"Cluster management tool: parallel SSH/SCP loop, dynamic and static node lists, other useful stuff.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}